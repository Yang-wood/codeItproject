<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" th:inline="javascript">
<head>
  <meta charset="UTF-8">
  <title>시험 목록</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f8f8f8;
      margin: 0;
      padding: 20px 0;
    }

    .container {
      max-width: 1000px;
      margin: 0 auto;
      background-color: #fff;
      padding: 20px;
    }

    h2 {
      margin-bottom: 20px;
    }

    .filter-section {
      margin-bottom: 20px;
    }

    .test-item {
      border: 1px solid #ddd;
      padding: 20px;
      margin-bottom: 16px;
      border-radius: 10px;
      background-color: #fff;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .test-info {
      flex: 1;
    }

    .test-title {
      font-size: 18px;
      font-weight: bold;
      margin-bottom: 6px;
    }

    .test-desc {
      color: #555;
      margin-bottom: 8px;
    }

    .test-meta {
      font-size: 13px;
      color: #888;
    }

    .test-actions button {
      margin-left: 10px;
      padding: 8px 14px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .btn-cart {
      background-color: #555;
      color: white;
    }

    .btn-start {
      background-color: #365cff;
      color: white;
    }

    #pagination {
      text-align: center;
      margin-top: 20px;
    }

    #pagination button {
      margin: 0 3px;
      padding: 6px 12px;
      border: none;
      background-color: #eee;
      cursor: pointer;
    }

    #pagination button[style*="bold"] {
      background-color: #365cff;
      color: white;
    }
  </style>
</head>
<body>

	<header style="position:fixed;top:0;width:100%;height:64px;background:white;
	               border-bottom:1px solid #eee;padding:0 24px;display:flex;
	               justify-content:flex-start;align-items:center;gap:40px;z-index:1000;">
	
	    <!-- 로고 -->
	    <a th:href="@{/main}" class="logo"
	       style="font-size:1.4rem;font-weight:bold;color:#1f2d3d;text-decoration:none;">CODEIT</a>
	
	    <!-- 메뉴 -->
	    <nav style="display:flex;gap:20px;align-items:center ; margin-left:auto; padding-right:50px;">
	        
	        <!-- 일반 회원이 로그인한 경우 -->
	        <div th:if="${session.member != null}">
	            <span th:text="${session.member.memberName}">회원이름</span>님 환영합니다!
	            <a th:href="@{/member/mypage}" style="text-decoration:none;color:#333;">마이페이지</a>
	            <a th:href="@{/member/logout}" style="text-decoration:none;color:#333;">로그아웃</a>
	            <input type="hidden" id="memberId" th:value="${session.member.memberId}" />
	        </div>
	
	        <!-- 관리자가 로그인한 경우 -->
	        <div th:if="${session.admin != null}">
	            <span th:text="${session.admin.adminName}">관리자</span>님 환영합니다!
	            <a th:href="@{/admin/dashboard}" style="text-decoration:none;color:#333;">관리자 페이지</a>
	            <a th:href="@{/admin/logout}" style="text-decoration:none;color:#333;">로그아웃</a>
	        </div>
	
	        <!-- 로그인하지 않은 경우 -->
	        <div th:if="${session.member == null and session.admin == null}">
	            <a th:href="@{/member/login}" style="text-decoration:none;color:#333;">로그인</a>
	            <a th:href="@{/member/register}" style="text-decoration:none;color:#333;">회원가입</a>
	        </div>
	        
	    </nav>
	</header>
	<div class="container">
	    <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom: 20px; padding-top:80px;">
			<h2 style="margin: 0; ">시험 목록</h2>
			
			<!-- 관리자만 시험지 생성 버튼 표시 -->
			<div th:if="${session.admin != null}">
				<a th:href="@{/omr/admin/register}" 
					style="display:inline-block; padding:8px 16px; background-color:#365cff; color:white; 
					border-radius:4px; text-decoration:none; font-weight:bold;">
					시험지 생성
				</a>
			</div>
		</div>
		
		<script th:inline="javascript">
			/*<![CDATA[*/
			let couponList = [[${session.testCoupons}]];
			console.log("쿠폰 리스트:", couponList);
			
			let itemId = couponList.length > 0 ? couponList[0].itemId : null;
			let couponCode = couponList.length > 0 ? couponList[0].couponCode : null;
			
			console.log("itemId:", itemId, "couponCode:", couponCode);
			/*]]>*/
		</script>
		
		<script th:inline="javascript">
			const isAdmin = /*[[${session.admin != null}]]*/ false;
		</script>
	    
		<!-- 로그인 유저 세션 -->
		<th:block th:if="${session.member == null && session.admin == null}">
			<script th:inline="javascript">
				alert("로그인이 필요한 서비스 입니다.");
				location.href = '/member/login'
			</script>
		</th:block>
		
		
		   <!-- 카테고리 필터 -->
		<div class="filter-section">
			<label for="categoryFilter">카테고리:</label>
			<select id="categoryFilter">
				<option value="all">전체</option>
				<option value="정보처리기사">정보처리기사</option>
				<option value="정보보안기사">정보보안기사</option>
				<option value="산업기사">산업기사</option>
			</select>
		</div>
	
		<!-- 시험 리스트 -->
		<div id="testList"></div>
		
		<!-- 페이지네이션 -->
		<div id="pagination"></div>
	</div>
  
	<!-- 응시 안내 모달 -->
	<div id="testModal" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%);
				background:#fff; padding:20px; border-radius:10px; box-shadow:0 0 10px rgba(0,0,0,0.2); z-index:1000;">
		<p>이 시험을 응시하시겠습니까?</p>
		<button id="startConfirm">응시 시작</button>
		<button id="closeModal">닫기</button>
	</div>
	<div id="modalOverlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
				background:rgba(0,0,0,0.4); z-index:999;">
	</div>
  
	<!-- 시험 시작 모달 -->
	<div id="examModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; 
				background:#fff; z-index:2000; overflow:auto; padding:40px;">
		<!-- 타이머 -->
		<div id="timer" style="font-size:18px; font-weight:bold; text-align:center; margin-bottom:16px; color:#ff003c;">
			경과 시간: 00:00
		</div>
		<div id="examContent"></div>
		<div style="margin-top:20px; text-align:center;">
			<button id="prevBtn">이전</button>
			<button id="nextBtn">다음</button>
			<button id="submitBtn" style="display:none;">제출</button>
		</div>
	</div>

	<script>

		$(document).ready(function () {
			
			function loadTests(category = 'all', page = 1) {
			   $.ajax({
					url: "/api/test/",
					method: "GET",
					data: { category, page },
					success: function (data) {
						console.log("시험 목록 데이터 : ", data);
						
						const testList = $('#testList');
						testList.empty();
						
						if (data.content.length === 0) {
							testList.append('<p>해당 카테고리의 시험이 없습니다.</p>');
							return;
						}
			
						data.content.forEach(function (test) {
							
							const visibility = test.isOpen === 'Y' ? '비공개' : '공개';
							
							testList.append(`
								<div class="test-item" data-testid="${test.testId}" data-isopen="${test.isOpen}">
									<div class="test-info">
										<div class="test-title" style="color:#365cff; cursor:pointer;" onclick="location.href='/test/read/${test.testId}'">
											${test.testTitle}
										</div>
										<div class="test-desc">${test.testDesc || '설명이 없습니다.'}</div>
										<div class="test-meta">
											시간: ${test.testLimit}분 | 조회수: ${test.viewCnt}
										</div>
									</div>
									<div class="test-actions">
										<button class="btn-start">바로응시</button>
										<div class="admin-actions" style="margin-top:8px; display:none;">
											<button class="btn-modify" style="background:#ffa500; color:white;">수정</button>
										</div>
										<div class="admin-actions" style="margin-top:8px; display:none;">
											<button class="btn-toggle" style="background:#ff3b3b; color:white;">${visibility}</button>
										</div>
									</div>
								</div>
							`);
						});
						
						if (isAdmin) {
							$('.admin-actions').show();
						}
				
						const pagination = $('#pagination');
						
						pagination.empty();
						
						for (let i = 1; i <= data.totalPages; i++) {
						  const active = i === page ? 'style="font-weight:bold;"' : '';
						  pagination.append(`<button ${active} onclick="loadTests('${category}', ${i})">${i}</button>`);
						}
			     	},
					error: function (err) {
					  alert("시험 목록을 불러오는 데 실패했습니다.");
					  console.error(err);
					}
				});
			}
			
			
			// 테스트 수정
			$(document).on("click", ".btn-modify", function() {
				const testId = $(this).closest(".test-item").data("testid");
				window.location.href = `/omr/admin/modify?testId=${testId}`;
			});
			
			
			
			// 시험지 비공개
			$(document).on("click", ".btn-toggle", function() {
				const item = $(this).closest(".test-item");
				const testId = item.data("testid");
				const isOpen = item.data("isopen");
				
				const action = isOpen === 'Y' ? "비공개" : "공개";
				
				if (confirm(`이 시험지를 ${action} 처리하시겠습니까?`)) {
					$.ajax({
						url : "/api/toggle",
						type : "POST",
						contentType : "application/json",
						data : JSON.stringify({ testId: testId }),
						success : function() {
							alert(`${action} 처리되었습니다`);
							location.reload();
						},
						error : function() {
							alert(`${action} 처리 실패`);
						}
					});
				}
			});
			
		 	
		  
		  
		 	
			$('#categoryFilter').on('change', function () {
				loadTests($(this).val(), 1);
			});
		
			loadTests();
		
		   
		   
			// 바로응시 버튼 클릭시 안내 모달
			$(document).on("click", ".btn-start", function() {
				const testTitle = $(this).closest(".test-item").find(".test-title").text();
				const testId = $(this).closest(".test-item").data("testid");
				
				$("#testModal").data("testid", testId).fadeIn();
				$("#modalOverlay").fadeIn();
			});
		  
		  
			// 모달 닫기 버튼
			$("#closeModal, #modalOverlay").on("click", function() {
				$("#testModal").fadeOut();
				$("#modalOverlay").fadeOut();
			});
		  
		  
		  
		  
			let currentQuestionIndex = 0;
			let examQuestions = []; // 서버에서 받아올 문제 목록, 선택 답안
		
			function renderQuestion(index) {
				const question = examQuestions[index];
				
				let html = `<h3>문제 ${index + 1} / ${examQuestions.length}</h3>`;
				html += `<p>${question.questionText}</p>`;
				
				let choices = [];
				
				console.log("choiceJson : ", question.choiceJson);
				
				try {
					const parsed = JSON.parse(question.choiceJson); 
					
					choices = Array.isArray(parsed) ? parsed : Object.values(parsed);
				} catch (e) {
					console.error("보기 파싱 실패:", e);
				}
				
				html += choices.map((choice, i) => {
					const realVal = i + 1;
					const checked = question.userAnswer == realVal ? 'checked' : '';
					return `<div>
								<label><input type="radio" name="answer${index}" value="${realVal}" ${checked}> ${choice}</label>
							</div>`;
				}).join('');
				
				$("#examContent").html(html);
				
				$("#prevBtn").toggle(index > 0);
				$("#nextBtn").toggle(index < examQuestions.length - 1);
				$("#submitBtn").toggle(index === examQuestions.length - 1);
				
				
				// 답안 수정 시 저장된 값 변경
				$(`input[name=answer${index}]`).on("change", function() {
					const selectedVal = $(this).val();
					
					examQuestions[index].userAnswer = selectedVal;
				});
				
			}
			
			
			// 타이머
			let startTime = null;
			let timerInterval = null;
			const memberId = $("#memberId").val();
			
			
			function startExam(testId) {
				console.log("startExam 호출, testId : ", testId);

				$.ajax({
					url: `/api/exam/start/${testId}`,
					method: "GET",
					success: function (data) {
						console.log("랜덤 문제 데이터 : ", data);
					  
						examQuestions = data.slice(0, 10); // 최대 20문제만
						currentQuestionIndex = 0;
						
						// 타이머
						startTime = new Date();
						timerInterval = setInterval(updateTimer, 1000);
						
						$("#examModal").fadeIn();
						renderQuestion(currentQuestionIndex);
					},
					error: function () {
						alert("시험 문제를 불러오는 데 실패했습니다.");
					}
				});
				
				$.ajax({
					url: "/api/exam/start",
					method: "POST",
					contentType: "application/json",
					data: JSON.stringify({
						memberId: memberId,
						testId: testId,
						couponCode: couponCode,
						itemId: itemId
					}),
					success: function(sessionId) {
						window.sessionId = sessionId;
					},
					error : function(xhr) {
						if(xhr.status === 403) {
							alert(xhr.responseText);
							location.href = `/vending/main`;
						} else {
							alert("시작 실패");
						}
					}
				});
				
			}
			
			
			
			function updateTimer() {
				const now = new Date();
				const elapsed = Math.floor((now - startTime) / 1000);
				
				const min = String(Math.floor(elapsed / 60)).padStart(2, '0');
				const sec = String(elapsed % 60).padStart(2, '0');
				
				$("#timer").text(`경과 시간 : ${min}:${sec}`);
			}
			
			
		
			$("#startConfirm").on("click", function () {
				const testId = $("#testModal").data("testid");
				$("#testModal, #modalOverlay").fadeOut();
				startExam(testId);
			});
			
			$("#nextBtn").on("click", function () {
				// 답안 저장
				const selectedVal = $(`input[name=answer${currentQuestionIndex}]:checked`).val();
				
				if (selectedVal !== undefined) {
					examQuestions[currentQuestionIndex].userAnswer = selectedVal;
				}
				
				// 문제 넘기기
				if (currentQuestionIndex < examQuestions.length - 1) {
					currentQuestionIndex++;
					renderQuestion(currentQuestionIndex);
				}
			});
			
			$("#prevBtn").on("click", function () {
				// 답안 저장
				const selectedVal = $(`input[name=answer${currentQuestionIndex}]:checked`).val();
				
				if (selectedVal !== undefined) {
					examQuestions[currentQuestionIndex].userAnswer = selectedVal;
				}
				
				// 문제 되돌리기
				if (currentQuestionIndex > 0) {
					currentQuestionIndex--;
					renderQuestion(currentQuestionIndex);
				}
			});
			
			$("#submitBtn").on("click", function () {
				// 타이머 스탑
				clearInterval(timerInterval);
				const endTime = new Date();
				const durationSec = Math.floor((endTime - startTime) / 1000);
				
				// 답안 저장
				const selectedVal = $(`input[name=answer${currentQuestionIndex}]:checked`).val();
				
				if (selectedVal !== undefined) {
					examQuestions[currentQuestionIndex].userAnswer = selectedVal;
				}
				
				const answers = examQuestions.map((q, i) => ({
					 questionId: q.questionId,
					 choiceAnswer: q.userAnswer !== undefined ? `${q.userAnswer}`.charAt(0) : null
				}));
				
				// 경과시간, 답안, 세션 제출
				const payload = {
						sessionId: window.sessionId,
						answers: answers,
						duration: durationSec
				};
				
				
				console.log("제출할 답안 데이터 : ", answers);
				
				$.ajax({
					url: "/api/exam/submit",
					method: "POST",
					contentType: "application/json",
					data: JSON.stringify(payload),
					success: function (res) {
						alert(res);
						
						$("#examModal").fadeOut();
					},
					error: function (xhr) {
						alert("제출 실패!" + xhr.status);
						console.error(xhr.responseText);
					}
				});
			});
			
			
			
			
			
			
			
	    });
    
	</script>
</body>
</html>